{
  "author": {
    "name": "Florian Holzapfel",
    "email": "flo.holzapfel@gmail.com"
  },
  "contributors": [
    {
      "name": "Enric León"
    },
    {
      "name": "David Higginbotham"
    },
    {
      "name": "Jonathan Greenemeier"
    },
    {
      "name": "Alan Levicki"
    },
    {
      "name": "Michael"
    },
    {
      "name": "Matt Roman"
    },
    {
      "name": "Fetrarijaona R."
    },
    {
      "name": "Jan Paul Erkelens"
    },
    {
      "name": "Christoph Herbst"
    },
    {
      "name": "doobinay"
    },
    {
      "name": "Hareesh"
    },
    {
      "name": "09setht"
    }
  ],
  "dependencies": {
    "express": "~3.4.0",
    "inflection": "~1.3.2",
    "lodash": "~2.4",
    "mongoose": "~3.8.0"
  },
  "description": "Easily restify mongoose database",
  "devDependencies": {
    "assertmessage": "0.0.2",
    "async": "~0.2.9",
    "jshint": "~2.4.0",
    "mocha": "~1.17.0",
    "request": "~2.34.0",
    "restify": "~2.6.0",
    "sinon": "~1.9.0"
  },
  "engines": {
    "node": "*"
  },
  "homepage": "http://florianholzapfel.github.io/express-restify-mongoose/",
  "keywords": [
    "ReST",
    "express",
    "restify",
    "mongodb",
    "mongoose"
  ],
  "licenses": [
    {
      "type": "The MIT License (MIT)",
      "url": "http://opensource.org/licenses/MIT"
    }
  ],
  "main": "./lib/express-restify-mongoose",
  "name": "express-restify-mongoose",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/florianholzapfel/express-restify-mongoose.git"
  },
  "scripts": {
    "pretest": "jshint lib test",
    "test": "mocha -R spec ./test --recursive --timeout 5s"
  },
  "version": "0.6.7",
  "readme": "# express-restify-mongoose\nThis library provides mongoose database models with a REST interface.\n\n[![Build Status](https://travis-ci.org/florianholzapfel/express-restify-mongoose.png)](https://travis-ci.org/florianholzapfel/express-restify-mongoose)\n[![NPM version](https://badge.fury.io/js/express-restify-mongoose.png)](http://badge.fury.io/js/express-restify-mongoose)\n[![Dependencies](https://david-dm.org/florianholzapfel/express-restify-mongoose.png)](https://david-dm.org/florianholzapfel/express-restify-mongoose)\n\n## Getting started\n\nIn your shell, install with npm:\n\n```sh\nnpm install express-restify-mongoose\n```\n\nIn your code:\n\n```javascript\nvar http = require('http');\nvar express = require('express');\nvar mongoose = require('mongoose');\nvar Schema = mongoose.Schema;\nvar restify = require('express-restify-mongoose')\n\nmongoose.connect('mongodb://localhost/database');\n\nvar Customer = new Schema({\n\tname: { type: String, required: true },\n\tcomment: { type: String }\n});\nvar CustomerModel = mongoose.model('Customer', Customer);\n\nvar Invoice = new Schema({\n    customer: { type: Schema.Types.ObjectId, ref: 'Customer' },\n\tamount: { type: Number, required: true }\n});\nvar InvoiceModel = mongoose.model('Invoice', Invoice);\n\nvar app = express();\napp.configure(function(){\n\tapp.use(express.bodyParser());\n\tapp.use(express.methodOverride());\n\trestify.serve(app, CustomerModel);\n\trestify.serve(app, InvoiceModel);\n});\n\nhttp.createServer(app).listen(3000, function() {\n\tconsole.log(\"Express server listening on port 3000\");\n});\n```\n\n```\nGET http://localhost/api/v1/Customers/count\nGET http://localhost/api/v1/Customers\nPUT http://localhost/api/v1/Customers\nPOST http://localhost/api/v1/Customers\nDELETE http://localhost/api/v1/Customers\n\nGET http://localhost/api/v1/Customers/:id\nPUT http://localhost/api/v1/Customers/:id\nPOST http://localhost/api/v1/Customers/:id\nDELETE http://localhost/api/v1/Customers/:id\n```\n\n### Query\n```\nGET http://localhost/api/v1/Customers?name=~regex\nGET http://localhost/api/v1/Customers?name=value\nGET http://localhost/api/v1/Customers?name=>value\nGET http://localhost/api/v1/Customers?name=>=value\nGET http://localhost/api/v1/Customers?name=<value\nGET http://localhost/api/v1/Customers?name=<=value\nGET http://localhost/api/v1/Customers?name=!=value\nGET http://localhost/api/v1/Customers?select=name\n```\n## Mongoose Query\n```\nvar query = { $or: [\n                {name: '~Another'},\n                {$and: [\n                    {name: '~Product'},\n                    {price: '<=10'}\n                ]}\n            ],\n                price: 20\n            };\nrequest({\n    url: 'api/v1/Model',\n    qs: { query: encodeURIComponent(JSON.stringify(query) }\n})\nGET http://localhost/api/v1/Customers?query={\"field\":\">=value\", \"field\":[value1,value2]\n                                                 \"$and\":[{\"field\":\"~value\"},{\"field\":\"!=value\"}]}\n```\n## Logical Queries (and,or)\n```\nGET http://localhost/api/v1/Customers?$and=[{\"field\":\">=value\"},{\"field\":[value1,value2]}]\nGET http://localhost/api/v1/Customers?$or=[{\"field\":\"value\"},{\"$and\",[{\"field\":\"~value\"},{\"field\":\"!=value\"}]}]\n```\n\n### Ordering & Sorting\n```\nGET http://localhost/api/v1/Customers?sort=name\nGET http://localhost/api/v1/Customers?sort=-name\nGET http://localhost/api/v1/Customers?skip=10&limit=10\n```\n\n### Populate Fields\n```\nGET http://localhost/api/v1/Invoices?populate=customer\nGET http://localhost/api/v1/Invoices?populate=customer&select=customer.name\n\n## populate fields will not have effect on select fields as supported by Mongoose\n# populate fields will be fetched along with select fields\nGET http://localhost/api/v1/Invoices?populate=customer\nGET http://localhost/api/v1/Invoices?populate=customer&select=amount\nGET http://localhost/api/v1/Invoices?populate=customer&select=customer,amount\nGET http://localhost/api/v1/Invoices?populate=customer&select=customer.name,amount\n\n```\n\n## Reference\n### serve\n```\nserve(app, model, [options])\n```\n\n#### arguments\n* app - The express app\n* model - Your mongoose database model\n* options - Optional options object\n  * strict - When set to true, disallows DELETE all, POST with id param, and PUT without id param\n  * prefix - Some path that will be prefixed to the REST path. Defaults to ```/api```\n  * version - An API version that will be prefixed to the rest path. Defaults to ```/v1```\n  * middleware - An express middleware or an array of express middlewares that will be used.\n  * prereq - A function that takes the req object and returns or yields true or false. This function will be called for every POST PUT and DELETE request and send 403 on false.\n  * access - A function that takes the req object and returns or yields 'public', 'private', or 'protected'. This function will be called for every GET POST and PUT request and filter out the appropriate fields\n  * plural - If ```true```, does not pluralize the database model name. Default is ```false```\n  * lowercase - If ```true```, turn model name to lower case before generating the routes.\n  * outputFn - A function with the signature ```function(res, result)``` that is used to output the result. ```res``` is a restify or express result object, ```result``` is the result that is returned from the mongo db.\n  * private - String of comma separated field names which are not to be returned by queries that do not have private access.\n  * protected - String of comma separated field names which are not to be returned by queries that have public access.\n  * postProcess - A middleware to be called after the response has been sent.\n    It is only executed on success.  If an error is sent to the client,\n    this is not executed.\n  * lean - If ```false```, will not convert to returned values to plain old javascript\n    objects. This is bad for performance, but it allows for returning virtuals, getters    and setters.\n  * findOneAndUpdate - If ```false```, will first find documents by id and then call save. This\n    allows mongoose validators to be called. Default is ```true```.\n    (For more information, read the Mongoose docs:\n    http://mongoosejs.com/docs/api.html#model_Model.findByIdAndUpdate)\n  * contextFilter - `function(model, req)`. Allows authorization per request, for example filtering\nitems based on req.user. Defaults to `return model`.\n * postCreate - A function with the signature `function (res, result, done)` which is run after document creation.\n * postDelete - A function with the signature `function (res, result, done)` which is run after document deletion.\n\n### defaults\n```\ndefaults(options)\n```\n\n#### arguments\n* options - Same options as above. This function will set this object as the defaults for anything you declare afterwards.\n\n\n## Contributors\n* Enric León (https://github.com/nothingbuttumbleweed)\n* David Higginbotham (https://github.com/dhigginbotham)\n* Jonathan Greenemeier (https://github.com/6eDesign)\n* Alan Levicki (https://github.com/alevicki)\n* Michael (https://github.com/micheee)\n* Matt Roman (https://github.com/romanmt)\n* Fetrarijaona R. (https://github.com/fetrarij)\n* Jan Paul Erkelens (https://github.com/jperkelens)\n* Christoph Herbst (https://github.com/cherbst)\n* doobinay (https://github.com/doobinay)\n* Hareesh (https://github.com/hareeshbabu82ns)\n* 09setht (https://github.com/09setht)\n\n## Formalia\n\n```\nCopyright (C) 2013 by Florian Holzapfel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n```\n",
  "bugs": {
    "url": "https://github.com/florianholzapfel/express-restify-mongoose/issues"
  },
  "_id": "express-restify-mongoose@0.6.7",
  "dist": {
    "shasum": "de3d648b2ae54658bc796ceaa154ae6b66a69db6"
  },
  "_from": "express-restify-mongoose@",
  "_resolved": "https://registry.npmjs.org/express-restify-mongoose/-/express-restify-mongoose-0.6.7.tgz"
}
